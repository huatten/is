"use strict";function t(t){const e=Object.prototype.toString.call(t).toLowerCase();return/\[object (.*)]/g.exec(e)[1]}function e(e,r){if(!("string"===t(e))){const a=t(e);throw new TypeError(`${r}: Expected a string but received a ${a}`)}}const r=function(t){e(t,"isTime12");return"string"==typeof t&&/^(?:0?[1-9]|1[0-2]):[0-5]\d:[0-5]\d(?:\.\d{3})?(?: (AM|am|PM|pm))?$/.test(t)},a=function(t){e(t,"isTime24");return t&&/^(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:\.\d{3})?$/.test(t)},n=function(t){return"number"==typeof t&&t>0&&new Date(t).getTime()===t},s=function(e){return"date"===t(e)};exports.isFeature=function(t){if(!s(t)||!n(t))throw new Error("isFeature: params must be a Date Object or timestamp");const e=s(t)?t:n(t)?new Date(t):"";return new Date>e},exports.isLastMonth=function(t){if(!s(t)||!n(t))throw new Error("isLastMonth: params must be a Date Object or timestamp");const e=s(t)?t:n(t)?new Date(t):"",r=new Date,a=r.getMonth()-1,o=a<0?r.getFullYear()-1:r.getFullYear();return e.getMonth()===(a+12)%12&&e.getFullYear()===o},exports.isLastWeek=function(t){if(!s(t)||!n(t))throw new Error("isLastWeek: params must be a Date Object or timestamp");const e=s(t)?t:n(t)?new Date(t):"",r=new Date,a=new Date(r),o=r.getDay(),i=o>=1?o-1:6;a.setDate(r.getDate()-i);const D=new Date(a);D.setDate(a.getDate()-7);const u=new Date(a);return u.setDate(a.getDate()-1),e>=D&&e<=u},exports.isLastYear=function(t){if(!s(t)||!n(t))throw new Error("isLastYear: params must be a Date Object or timestamp");const e=s(t)?t:n(t)?new Date(t):"",r=(new Date).getFullYear()-1;return e.getFullYear()===r},exports.isLeapYear=function(t){const e=/^[1-9]\d{3}$/.test(t),r=parseInt(t,10);return!(!e||Number.isNaN(r))&&(r%4==0&&r%100!=0||r%400==0)},exports.isNextMonth=function(t){if(!s(t)||!n(t))throw new Error("isNextMonth: params must be a Date Object or timestamp");const e=s(t)?t:n(t)?new Date(t):"",r=new Date,a=r.getFullYear();let o=r.getMonth()+1,i=a;return o>11&&(o=0,i++),e.getFullYear()===i&&e.getMonth()===o},exports.isNextWeek=function(t){if(!s(t)||!n(t))throw new Error("isNextWeek: params must be a Date Object or timestamp");const e=s(t)?t:n(t)?new Date(t):"",r=new Date,a=new Date(r),o=r.getDay(),i=o>=1?o-1:6;a.setDate(r.getDate()-i);const D=new Date(a);D.setDate(a.getDate()+7);const u=new Date(D);return u.setDate(D.getDate()+6),e>=D&&e<=u},exports.isNextYear=function(t){if(!s(t)||!n(t))throw new Error("isNextYear: params must be a Date Object or timestamp");const e=s(t)?t:n(t)?new Date(t):"",r=(new Date).getFullYear()+1;return e.getFullYear()===r},exports.isPast=function(t){if(!s(t)||!n(t))throw new Error("isPast: params must be a Date Object or timestamp");const e=s(t)?t:n(t)?new Date(t):"";return new Date<e},exports.isThisMonth=function(t){if(!s(t)||!n(t))throw new Error("isThisMonth: params must be a Date Object or timestamp");const e=s(t)?t:n(t)?new Date(t):"",r=new Date;return e.getFullYear()===r.getFullYear()&&e.getMonth()===r.getMonth()},exports.isThisWeek=function(t){if(!s(t)||!n(t))throw new Error("isThisWeek: params must be a Date Object or timestamp");const e=s(t)?t:n(t)?new Date(t):"",r=new Date,a=new Date(r.setDate(r.getDate()-r.getDay())),o=new Date(r.setDate(r.getDate()-r.getDay()+6));return e>=a&&e<=o},exports.isThisYear=function(t){if(!s(t)||!n(t))throw new Error("isThisYear: params must be a Date Object or timestamp");const e=s(t)?t:n(t)?new Date(t):"",r=new Date;return e.getFullYear()===r.getFullYear()},exports.isTime=function(t){return e(t,"isTime"),r(t)||a(t)},exports.isTime12=r,exports.isTime24=a,exports.isTimestamp=n,exports.isToday=function(t){const e=s(t)?t:n(t)?new Date(t):"";let r=(new Date).toDateString();return s(e)&&e.toDateString()===r},exports.isTomorrow=function(t){if(!s(t)||!n(t))throw new Error("isTomorrow: params must be a Date Object or timestamp");const e=s(t)?t:n(t)?new Date(t):"",r=new Date,a=new Date(r.setDate(r.getDate()+1)).toDateString();return s(e)&&e.toDateString()===a},exports.isWeekday=function(t){if(!s(t)||!n(t))throw new Error("isWeekday: params must be a Date Object or timestamp");const e=s(t)?t:n(t)?new Date(t):"",r=e?.getDay();return s(e)&&r>=1&&r<=5},exports.isWeekend=function(t){if(!s(t)||!n(t))throw new Error("isWeekend: params must be a Date Object or timestamp");const e=s(t)?t:n(t)?new Date(t):"",r=e?.getDay();return s(e)&&(0===r||6===r)},exports.isYesterday=function(t){if(!s(t)||!n(t))throw new Error("isYesterday: params must be a Date Object or timestamp");const e=s(t)?t:n(t)?new Date(t):"",r=new Date,a=new Date(r.setDate(r.getDate()-1)).toDateString();return s(e)&&e.toDateString()===a};
