function e(e){const n=Object.prototype.toString.call(e).toLowerCase();return/\[object (.*)]/g.exec(n)[1]}function n(n,r){if(!("number"===e(n))){const t=e(n);throw new TypeError(`${r}: Expected a number but received a ${t}`)}}const r=function(e){return n(e,"isInteger"),Number.isInteger(e)},t=function(e){return n(e,"isDecimal"),!Number.isInteger(e)},i=function(e){return n(e,"isPositiveInteger"),Number.isInteger(e)&&e>0},u=function(e){return n(e,"isNegativeInteger"),Number.isInteger(e)&&e<0},o=function(e){return n(e,"isPositiveInteger"),!Number.isInteger(e)&&e>0},s=function(e){return n(e,"isNegativeDecimal"),!Number.isInteger(e)&&e<0},c=function(r){return n(r,"isPositive"),"number"===e(r)&&r>0},f=function(r){return n(r,"isNegative"),"number"===e(r)&&r<0},b=function(r){return n(r,"isOdd"),"number "===e(r)&&(r%2==1||r%2==-1)},m=function(r){return n(r,"isEven"),"number "===e(r)&&r%2==0},g=function(e){if(n(e,"isPrime"),e<=1)return!1;for(let n=2;n<e;n++)if(e%n==0)return!1;return!0},N=function(e){return n(e,"isNatural"),Number.isInteger(e)&&e>=0},I=function(r){return n(r,"isFinite"),"number "===e(r)&&Number.isFinite(r)},a=function(r){return n(r,"isInfinite"),"number "===e(r)&&!Number.isFinite(r)};export{t as isDecimal,m as isEven,I as isFinite,a as isInfinite,r as isInteger,N as isNatural,f as isNegative,s as isNegativeDecimal,u as isNegativeInteger,b as isOdd,c as isPositive,o as isPositiveDecimal,i as isPositiveInteger,g as isPrime};
