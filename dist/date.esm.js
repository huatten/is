function t(t){const e=Object.prototype.toString.call(t).toLowerCase();return/\[object (.*)]/g.exec(e)[1]}function e(e,a){if(!("string"===t(e))){const r=t(e);throw new TypeError(`${a}: Expected a string but received a ${r}`)}}const a=function(t){e(t,"isTime12");return"string"==typeof t&&/^(?:0?[1-9]|1[0-2]):[0-5]\d:[0-5]\d(?:\.\d{3})?(?: (AM|am|PM|pm))?$/.test(t)},r=function(t){e(t,"isTime24");return t&&/^(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:\.\d{3})?$/.test(t)},n=function(t){return e(t,"isTime"),a(t)||r(t)},o=function(t){const e=/^[1-9]\d{3}$/.test(t),a=parseInt(t,10);return!(!e||Number.isNaN(a))&&(a%4==0&&a%100!=0||a%400==0)},s=function(t){return"number"==typeof t&&t>0&&new Date(t).getTime()===t},i=function(e){return"date"===t(e)},D=function(t){const e=i(t)?t:s(t)?new Date(t):"";let a=(new Date).toDateString();return i(e)&&e.toDateString()===a},u=function(t){if(!i(t)||!s(t))throw new Error("isYesterday: params must be a Date Object or timestamp");const e=i(t)?t:s(t)?new Date(t):"",a=new Date,r=new Date(a.setDate(a.getDate()-1)).toDateString();return i(e)&&e.toDateString()===r},w=function(t){if(!i(t)||!s(t))throw new Error("isTomorrow: params must be a Date Object or timestamp");const e=i(t)?t:s(t)?new Date(t):"",a=new Date,r=new Date(a.setDate(a.getDate()+1)).toDateString();return i(e)&&e.toDateString()===r},c=function(t){if(!i(t)||!s(t))throw new Error("isWeekend: params must be a Date Object or timestamp");const e=i(t)?t:s(t)?new Date(t):"",a=e?.getDay();return i(e)&&(0===a||6===a)},m=function(t){if(!i(t)||!s(t))throw new Error("isWeekday: params must be a Date Object or timestamp");const e=i(t)?t:s(t)?new Date(t):"",a=e?.getDay();return i(e)&&a>=1&&a<=5},g=function(t){if(!i(t)||!s(t))throw new Error("isFeature: params must be a Date Object or timestamp");const e=i(t)?t:s(t)?new Date(t):"";return new Date>e},f=function(t){if(!i(t)||!s(t))throw new Error("isPast: params must be a Date Object or timestamp");const e=i(t)?t:s(t)?new Date(t):"";return new Date<e},p=function(t){if(!i(t)||!s(t))throw new Error("isThisWeek: params must be a Date Object or timestamp");const e=i(t)?t:s(t)?new Date(t):"",a=new Date,r=new Date(a.setDate(a.getDate()-a.getDay())),n=new Date(a.setDate(a.getDate()-a.getDay()+6));return e>=r&&e<=n},b=function(t){if(!i(t)||!s(t))throw new Error("isThisMonth: params must be a Date Object or timestamp");const e=i(t)?t:s(t)?new Date(t):"",a=new Date;return e.getFullYear()===a.getFullYear()&&e.getMonth()===a.getMonth()},l=function(t){if(!i(t)||!s(t))throw new Error("isThisYear: params must be a Date Object or timestamp");const e=i(t)?t:s(t)?new Date(t):"",a=new Date;return e.getFullYear()===a.getFullYear()},h=function(t){if(!i(t)||!s(t))throw new Error("isNextMonth: params must be a Date Object or timestamp");const e=i(t)?t:s(t)?new Date(t):"",a=new Date,r=a.getFullYear();let n=a.getMonth()+1,o=r;return n>11&&(n=0,o++),e.getFullYear()===o&&e.getMonth()===n},j=function(t){if(!i(t)||!s(t))throw new Error("isNextWeek: params must be a Date Object or timestamp");const e=i(t)?t:s(t)?new Date(t):"",a=new Date,r=new Date(a),n=a.getDay(),o=n>=1?n-1:6;r.setDate(a.getDate()-o);const D=new Date(r);D.setDate(r.getDate()+7);const u=new Date(D);return u.setDate(D.getDate()+6),e>=D&&e<=u},E=function(t){if(!i(t)||!s(t))throw new Error("isNextYear: params must be a Date Object or timestamp");const e=i(t)?t:s(t)?new Date(t):"",a=(new Date).getFullYear()+1;return e.getFullYear()===a},Y=function(t){if(!i(t)||!s(t))throw new Error("isLastWeek: params must be a Date Object or timestamp");const e=i(t)?t:s(t)?new Date(t):"",a=new Date,r=new Date(a),n=a.getDay(),o=n>=1?n-1:6;r.setDate(a.getDate()-o);const D=new Date(r);D.setDate(r.getDate()-7);const u=new Date(r);return u.setDate(r.getDate()-1),e>=D&&e<=u},O=function(t){if(!i(t)||!s(t))throw new Error("isLastMonth: params must be a Date Object or timestamp");const e=i(t)?t:s(t)?new Date(t):"",a=new Date,r=a.getMonth()-1,n=r<0?a.getFullYear()-1:a.getFullYear();return e.getMonth()===(r+12)%12&&e.getFullYear()===n},d=function(t){if(!i(t)||!s(t))throw new Error("isLastYear: params must be a Date Object or timestamp");const e=i(t)?t:s(t)?new Date(t):"",a=(new Date).getFullYear()-1;return e.getFullYear()===a};export{g as isFeature,O as isLastMonth,Y as isLastWeek,d as isLastYear,o as isLeapYear,h as isNextMonth,j as isNextWeek,E as isNextYear,f as isPast,b as isThisMonth,p as isThisWeek,l as isThisYear,n as isTime,a as isTime12,r as isTime24,s as isTimestamp,D as isToday,w as isTomorrow,m as isWeekday,c as isWeekend,u as isYesterday};
