!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).date={})}(this,(function(e){"use strict";function t(e){const t=Object.prototype.toString.call(e).toLowerCase();return/\[object (.*)]/g.exec(t)[1]}function a(e,a){if(!("string"===t(e))){const n=t(e);throw new TypeError(`${a}: Expected a string but received a ${n}`)}}const n=function(e){a(e,"isTime12");return"string"==typeof e&&/^(?:0?[1-9]|1[0-2]):[0-5]\d:[0-5]\d(?:\.\d{3})?(?: (AM|am|PM|pm))?$/.test(e)},r=function(e){a(e,"isTime24");return e&&/^(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:\.\d{3})?$/.test(e)},s=function(e){return"number"==typeof e&&e>0&&new Date(e).getTime()===e},o=function(e){return"date"===t(e)};e.isFeature=function(e){if(!o(e)||!s(e))throw new Error("isFeature: params must be a Date Object or timestamp");const t=o(e)?e:s(e)?new Date(e):"";return new Date>t},e.isLastMonth=function(e){if(!o(e)||!s(e))throw new Error("isLastMonth: params must be a Date Object or timestamp");const t=o(e)?e:s(e)?new Date(e):"",a=new Date,n=a.getMonth()-1,r=n<0?a.getFullYear()-1:a.getFullYear();return t.getMonth()===(n+12)%12&&t.getFullYear()===r},e.isLastWeek=function(e){if(!o(e)||!s(e))throw new Error("isLastWeek: params must be a Date Object or timestamp");const t=o(e)?e:s(e)?new Date(e):"",a=new Date,n=new Date(a),r=a.getDay(),i=r>=1?r-1:6;n.setDate(a.getDate()-i);const D=new Date(n);D.setDate(n.getDate()-7);const u=new Date(n);return u.setDate(n.getDate()-1),t>=D&&t<=u},e.isLastYear=function(e){if(!o(e)||!s(e))throw new Error("isLastYear: params must be a Date Object or timestamp");const t=o(e)?e:s(e)?new Date(e):"",a=(new Date).getFullYear()-1;return t.getFullYear()===a},e.isLeapYear=function(e){const t=/^[1-9]\d{3}$/.test(e),a=parseInt(e,10);return!(!t||Number.isNaN(a))&&(a%4==0&&a%100!=0||a%400==0)},e.isNextMonth=function(e){if(!o(e)||!s(e))throw new Error("isNextMonth: params must be a Date Object or timestamp");const t=o(e)?e:s(e)?new Date(e):"",a=new Date,n=a.getFullYear();let r=a.getMonth()+1,i=n;return r>11&&(r=0,i++),t.getFullYear()===i&&t.getMonth()===r},e.isNextWeek=function(e){if(!o(e)||!s(e))throw new Error("isNextWeek: params must be a Date Object or timestamp");const t=o(e)?e:s(e)?new Date(e):"",a=new Date,n=new Date(a),r=a.getDay(),i=r>=1?r-1:6;n.setDate(a.getDate()-i);const D=new Date(n);D.setDate(n.getDate()+7);const u=new Date(D);return u.setDate(D.getDate()+6),t>=D&&t<=u},e.isNextYear=function(e){if(!o(e)||!s(e))throw new Error("isNextYear: params must be a Date Object or timestamp");const t=o(e)?e:s(e)?new Date(e):"",a=(new Date).getFullYear()+1;return t.getFullYear()===a},e.isPast=function(e){if(!o(e)||!s(e))throw new Error("isPast: params must be a Date Object or timestamp");const t=o(e)?e:s(e)?new Date(e):"";return new Date<t},e.isThisMonth=function(e){if(!o(e)||!s(e))throw new Error("isThisMonth: params must be a Date Object or timestamp");const t=o(e)?e:s(e)?new Date(e):"",a=new Date;return t.getFullYear()===a.getFullYear()&&t.getMonth()===a.getMonth()},e.isThisWeek=function(e){if(!o(e)||!s(e))throw new Error("isThisWeek: params must be a Date Object or timestamp");const t=o(e)?e:s(e)?new Date(e):"",a=new Date,n=new Date(a.setDate(a.getDate()-a.getDay())),r=new Date(a.setDate(a.getDate()-a.getDay()+6));return t>=n&&t<=r},e.isThisYear=function(e){if(!o(e)||!s(e))throw new Error("isThisYear: params must be a Date Object or timestamp");const t=o(e)?e:s(e)?new Date(e):"",a=new Date;return t.getFullYear()===a.getFullYear()},e.isTime=function(e){return a(e,"isTime"),n(e)||r(e)},e.isTime12=n,e.isTime24=r,e.isTimestamp=s,e.isToday=function(e){const t=o(e)?e:s(e)?new Date(e):"";let a=(new Date).toDateString();return o(t)&&t.toDateString()===a},e.isTomorrow=function(e){if(!o(e)||!s(e))throw new Error("isTomorrow: params must be a Date Object or timestamp");const t=o(e)?e:s(e)?new Date(e):"",a=new Date,n=new Date(a.setDate(a.getDate()+1)).toDateString();return o(t)&&t.toDateString()===n},e.isWeekday=function(e){if(!o(e)||!s(e))throw new Error("isWeekday: params must be a Date Object or timestamp");const t=o(e)?e:s(e)?new Date(e):"",a=t?.getDay();return o(t)&&a>=1&&a<=5},e.isWeekend=function(e){if(!o(e)||!s(e))throw new Error("isWeekend: params must be a Date Object or timestamp");const t=o(e)?e:s(e)?new Date(e):"",a=t?.getDay();return o(t)&&(0===a||6===a)},e.isYesterday=function(e){if(!o(e)||!s(e))throw new Error("isYesterday: params must be a Date Object or timestamp");const t=o(e)?e:s(e)?new Date(e):"",a=new Date,n=new Date(a.setDate(a.getDate()-1)).toDateString();return o(t)&&t.toDateString()===n}}));
